`timescale 1ns / 1ps
/*
This project is copied from Wang Yongbin, the greatest hardware coder I have ever seen.
Please allow me to give my all respect and salute to he and his effort
*/
module topmodule(
    input clk,
    input [11:0] sw,
    input [3:0] keys,
    output [7:0] seg,
    output [5:0] an,
    output [3:0] Q,
    output CO,
    output [11:5] led,
    output key_pulldown,
    output reg buzzer = 1
);

wire rst_n;//the "n" is the "next" mean, after are all the same
//rst_n is to control the clk and run_enable is to control the input
wire run_enable;
wire key0,key1,key2,key3;
//key0 out go up; key1 out go down; key2 in 1 floor; key3 in 2 floor.
wire led0,led1,led2,led3;
reg [7:0] leds;
reg [4:0] request;
reg [4:0] request_n;
//  request [4] reset_go_down;request [3] up_inside;request [2] up_outside;request [1] down_inside;request [0] down_outside
reg [27:0] counter_val;
reg [27:0] counter_val_n;
reg floor;
// 1'b0 1floor;1'b1 2floor
wire [2:0] seg_status;
//  3'b010 go up;3'b011 std by;3'b100 go down
reg [1:0] status;
reg [1:0] status_n;
//2'b00 一楼 ，stand by;2'b01 一楼上行 run;2'b10 二楼 ，stand by;2'b11 二楼下行 run
wire clk_1k;

clk_div clk_div0(
    .clk_in(clk),
    .rst_n(1'b1),
    .clk_div(clk_1k)
);

seg_drv seg_drv0(
    .clk(clk_1k),
    .bcd_data_in({16'b1111_1111_1111_1111,{3'b0,floor},{1'b0,seg_status}}),
    .seg_data_out(seg),
    .seg_channel_out(an)
);

assign key_pulldown = 1'b0;
assign rst_n = sw[11];
assign run_enable = sw[0];
assign {led,CO} = leds;
assign Q = {led3,led2,led1,led0};
assign {key3,key2,key1,key0}= {4{~run_enable}}|{keys};
assign seg_status = status[0] ? (status[1] ? 3'b100 : 3'b010): 3'b011;

assign led0 = request_n[0];
assign led1 = request_n[2];
assign led2 = request_n[1];
assign led3 = request_n[3];

always @(posedge clk) begin
    status      <= status_n      ;
    counter_val <= counter_val_n ;
    request     <= request_n     ;
end

always@(*)begin//this module is to make the input request state machine and transfer lunch it.
    request_n[3:0] = request[3:0];

    if (status!=2'b00 && key2 == 1'b0)
        request_n[1] = 1'b1;//down_inside
       
    if (status!=2'b00 && key0 == 1'b0)
        request_n[0] = 1'b1;//down_outside
    
    if (status!=2'b10 && key1 == 1'b0)
        request_n[2] = 1'b1;//up_outside
    
    if (status!=2'b10 && key3 == 1'b0)
        request_n[3] = 1'b1;//up_inside

    if(status==2'b00)
        request_n[1:0] =2'b00;

    if(status==2'b10)
        request_n[3:2] =2'b00;
        
    request_n[4] = ~rst_n;
end

always@(*)begin//this module is by the input decide the next module is what
    if(status==2'b00 && (request[2] || request[3]) && (!request[4]))
        status_n = 2'b01;
    else if (status==2'b01 && counter_val==28'b1) begin
        status_n = 2'b10;
    end 
    else if (status==2'b10 && (request[0] || request[1] || request[4]))begin
        status_n = 2'b11;
    end
    else if (status==2'b11 && counter_val==28'b1) begin
        status_n = 2'b00;
    end 
    else begin
        status_n = status;
    end
end

always@(*)begin//this module is set a series of the states and time to realize the waterfall lights time request
    if(status[1:0]==2'b00)
        counter_val_n = 28'd250_000_000;
    else if (status[1:0]==2'b01) begin
        counter_val_n = counter_val -1'b1;
    end 
    else if (status[1:0]==2'b10) begin
        counter_val_n = 28'd250_000_000;
    end
    else if (status[1:0]==2'b11) begin
        counter_val_n = counter_val -1'b1;
    end
end

always @(*) begin//this module is to realize the water follow lights request during the elector running
    if (status==2'b01)begin
        if (counter_val>=200_000_000)
            leds[7]=1'b1;
        else
            leds[7]=1'b0;

    if (counter_val>=150_000_000&&counter_val<=200_000_000)
        leds[6]=1'b1;
    else
        leds[6]=1'b0;

    if (counter_val>=100_000_000&&counter_val<=150_000_000)
        leds[5]=1'b1;
    else 
        leds[5]=1'b0;
    
    if (counter_val>=50_000_000&&counter_val<=100_000_000)
        leds[4]=1'b1;
    else
        leds[4]=1'b0;
        
    if (counter_val<=50_000_000)
        leds[3]=1'b1;
    else 
        leds[3]=1'b0;
    end
    
    if (status==2'b11)begin
        if (counter_val>=200_000_000)
            leds[3]=1'b1;
        else
            leds[3]=1'b0;

    if (counter_val>=150_000_000&&counter_val<=200_000_000)
        leds[4]=1'b1;
    else
        leds[4]=1'b0;

    if (counter_val>=100_000_000&&counter_val<=150_000_000)
        leds[5]=1'b1;
    else 
        leds[5]=1'b0;
    
    if (counter_val>=50_000_000&&counter_val<=100_000_000)
        leds[6]=1'b1;
    else
        leds[6]=1'b0;
   
    if (counter_val<=50_000_000)
        leds[7]=1'b1;
    else 
        leds[7]=1'b0;
    end  
    
    if((status==2'b00)||(status==2'b10))
    begin
        leds[7]=1'b0;
        leds[3]=1'b0;
    end
end

always@(*)begin
    floor=status[1];

    if(status==2'b01&&counter_val<=50_000_000)
        floor=1'b1;

    if(status==2'b11&&counter_val<=50_000_000)
        floor=1'b0;
end

/*
the following code is the buzzer using, testing by Larry 
*/

reg [31:0] temp =0;
reg clk_1khz = 0;
always@(posedge clk)
begin
    if(temp == 49999)
        begin
            temp <= 0;
            clk_1khz <= 1;
        end
    else
        begin
            temp <= temp +1;
            clk_1khz <= 0;
        end
end

reg [1:0] lou1_dly;
reg turn = 0;
reg [15:0] cnt = 0;
always@(posedge clk)begin
    lou1_dly <= status;
    if(status != lou1_dly)
         turn <= 1;
    else if(cnt == 100)
            turn <= 0;
end

parameter cnt_max = 100;        
always@(posedge clk_1khz)begin
    if(turn == 1)
        begin
            if(cnt == cnt_max)
                cnt <= 0;
            else
                cnt <= cnt + 1;
        end
    else
        cnt <= 0;
end

always@(posedge clk_1khz)begin
    if((turn == 1)&&((status==2'b00)||(status==2'b10)))
         buzzer <= ~buzzer;
    else buzzer <= 0;
end

endmodule
